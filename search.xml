<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Javascript的特点]]></title>
      <url>/2017/08/01/js-feature/</url>
      <content type="html"><![CDATA[<h3 id="JavaScript的特点"><a href="#JavaScript的特点" class="headerlink" title="JavaScript的特点"></a>JavaScript的特点</h3><blockquote>
<p>JavaScript是一种基于对象和事件驱动的客户端脚本语言，并具有相对的安全性，主要用于创建交互性较强的动态页面。其主要特点介绍如下。</p>
<ol>
<li>基于对象</li>
<li>事件驱动</li>
<li>解析性语言</li>
<li>实时性</li>
<li>动态性</li>
<li>跨平台</li>
<li>开发使用简单</li>
<li>相对安全性</li>
</ol>
</blockquote>
<ol>
<li><p>基于对象: JavaScript是基于对象的脚本编程语言，能通过DOM(文档结构模型)及自身提供的对象和操作方法来实现所需的功能。</p>
</li>
<li><p>事件驱动: JavaScript采用事件驱动方式，能响应键盘，鼠标及浏览器窗口事件等，并执行指定的操作。</p>
</li>
<li><p>解释性语言: JavaScript是一种解释性脚本语言，无需专门的编译器进行编译，在嵌入JavaScript脚本的HTML文档被浏览器载入时逐行地解释，大量节省客户端与服务器端进行数据交互的时间。</p>
</li>
<li><p>实时性: JavaScript事件处理是实时性的，无需经服务器可对客户端的事件做出响应，并用处理结果实时更新目标页面。</p>
</li>
<li><p>动态性: JavaScript提供简单高效的语言流程，灵活处理对象的各种方法和属性，同时及时响应文档页面事件，实现页面的交互性和动态性。</p>
</li>
<li><p>跨平台: JavaScript脚本的正确运行依赖于浏览器，而与具体的操作系统无关。只要客户端装有支持JavaScript脚本的浏览器，JavaScript脚本运行结果就能正确反映在客户端浏览器平台上。</p>
</li>
<li><p>开发使用简单: JavaScript基本结构类似于C语言，采用小程序段的方式编程，并提供了简易的开发平台和便捷的开发流程，既能嵌入到HTML文档中供浏览器解释执行，同时JavaScript的变量类型是弱类型，使用不严格。</p>
</li>
<li><p>相对安全性: JavaScript是客户端脚本，通过浏览器解释执行。它不允许直接访问本地计算机，并且不能将数据存到服务器上，它也不允许对网络文档进行修改和删除，只能通过浏览器实现信息浏览或动态交互，从而有效地防止数据的丢失。</p>
</li>
</ol>
<blockquote>
<p>综合上述，JavaScript是一种有着较强生命力和发展潜力的脚本描述语言，可被直接嵌入到HTML文档中，供浏览器解释执行；直接响应客户端事件，如验证数据表单合法性等，并调用相应的处理方法，迅速返回处理结果并更新页面，实现 Web交互性和动态的要求。同时将大部分的工作交给客户端处理，将Web服务器资源服务器消耗降到最低。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/31/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[java object]]></title>
      <url>/2016/08/02/java-object/</url>
      <content type="html"><![CDATA[<h3 id="Java中的面向对象概述"><a href="#Java中的面向对象概述" class="headerlink" title="Java中的面向对象概述"></a>Java中的面向对象概述</h3><blockquote>
<ul>
<li>面向对象是相对于面向过程而言的</li>
<li>面向对象和面向过程都是一种思想，不是编程语言</li>
<li>面向过程强调的是功能的行为</li>
<li>面向对象是将功能封装进对象，强调的是具备了功能的对象</li>
<li>面向对象是居于面向过程的</li>
</ul>
</blockquote>
<h3 id="对象中的成员分类"><a href="#对象中的成员分类" class="headerlink" title="对象中的成员分类"></a>对象中的成员分类</h3><blockquote>
<p>成员包含属性和行为<br>1.静态部分： 属性 —&gt; 成员变量<br>2.动态部分： 行为 —&gt; 成员方法</p>
</blockquote>
<h3 id="面向对象的特征-重点"><a href="#面向对象的特征-重点" class="headerlink" title="面向对象的特征(重点)"></a>面向对象的特征(重点)</h3><ol>
<li>封装： 封装是将对象的属性和行为封装起来，对外隐藏实现细节，其载体就是类；<blockquote>
<p>   封装的优点</p>
<pre><code>1.  将变化隔离
2.  便于使用
3.  提高重用性
4.  提高安全性
</code></pre></blockquote>
</li>
<li>继承： 继承是指一个对象从另一个对象中获取属性和方法的过程<blockquote>
<p>   继承的优点</p>
<pre><code>1.  不需要写重复的代码，新的实现可以通过继承而来
2.  在原有的实现中扩展自己
</code></pre><p>   继承的缺点</p>
<pre><code>1.  打破了封装，因为基类向子类暴露了实现细节
</code></pre></blockquote>
</li>
<li>多态：父类对象应用于子类对象的特征就叫多态（即子类对象的指针指向父类对象，执行时执行子类对象的行为）<blockquote>
<p>   多态的优点：</p>
<pre><code>1.同一操作作用于不同的对象，可以有不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。
</code></pre></blockquote>
</li>
</ol>
<h3 id="从面向过程到面向对象的迭代"><a href="#从面向过程到面向对象的迭代" class="headerlink" title="从面向过程到面向对象的迭代"></a>从面向过程到面向对象的迭代</h3>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
