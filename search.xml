<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[对象的扩展(es6-4)]]></title>
      <url>/2017/08/06/es6-4/</url>
      <content type="html"><![CDATA[<ul>
<li>对象属性的简写</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 对象中的属性和值的变量名称一样时，可以简写一个就可以了</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//a : a,    // 以前的写法</span>
  a<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// es6中的写法</span>
  func <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>对象中方法的简写</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 正常写法</span>
func <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// es6中，相当于把：function弃掉了</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 如下</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">,</span>    
  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Object.keys(object)</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 获取对象中的键的集合，es5以前是使用for in遍历</span>
<span class="token comment" spellcheck="true">// Object.keys(object)返回的是一个数组，该数组保存参数对象的keys,即该方法的作用是获取一个对象的键的集合</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  a <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//["a", "func"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ul>
<li>Object.assign(resultObj, obj)</li>
<li>　　1.方法的作用：合并对象</li>
<li>　　2.返回被改变的对象</li>
<li>　　3.不会改变obj,但obj中的属性在resultObj中也存在了，即扩展了对象resultObj</li>
</ul>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  a <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> resultObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  b <span class="token punctuation">:</span> <span class="token number">15</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>resultObj<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// {b: 15, a: 10, func: function}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ul>
<li>Object.defineProperty(obj, property, [obj | function]);</li>
<li>　　1.可实现双向数据绑定 (待更新。。。)</li>
<li>　　2.给对象添加属性，设置属性值是否能被修改</li>
</ul>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.给对象添加属性</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  value <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//属性的值</span>
  writable <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//设置属性的值是否可被修改，默认是false</span>
  configurable <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//总开关。false时就不能再设置value/writable/configurable</span>
  enumerable <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//是否能遍历他的key(for in循环或Object.keys),默认false?</span>
  <span class="token comment" spellcheck="true">//get访问器：如果设置get访问器，其他的设置将不能使用</span>
  <span class="token comment" spellcheck="true">//set访问器：如果设置set访问器，其他的设置将不能使用</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 2.每次调用data.b都会触发访问器set或get</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//es6语法</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"给b设置了新的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"获取b的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这个时候会执行set(10)访问器</span>
data<span class="token punctuation">.</span>b<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//会执行get()访问器</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> ECMAScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数的扩展之箭头函数(es6-3)]]></title>
      <url>/2017/08/06/es6-3/</url>
      <content type="html"><![CDATA[<ul>
<li>函数参数的默认值</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  b <span class="token operator">=</span> b <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//平常以这种方式设置参数的默认值</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用默认值 7</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//15</span>

<span class="token comment" spellcheck="true">//或</span>
<span class="token keyword">function</span> sum <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置默认值</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>箭头函数</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript">           <span class="token comment" spellcheck="true">//参数    //返回值</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>        
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//b没有实参，使用默认值2 //结果 7</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//15</span>

<span class="token comment" spellcheck="true">// 或</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"如果有多行代码就使用大括号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>        
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>箭头函数中的this<ul>
<li>箭头函数的this始终指向函数定义时的this</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  a <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  func <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  test <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里报错，因为this===window</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">//  改进 -将this赋值给其他变量</span>
 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
   a <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
   func <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   test <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       that<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this === window 所以才需要这步var that = this;将this保存到that中</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//10</span>


<span class="token comment" spellcheck="true">// 改箭头函数</span>
 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
   a <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
   func <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   test <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">// test函数内部的this === obj</span>
     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 箭头函数定义时this是test函数内部的this</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//10</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>箭头函数的缩写</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//value指返回的值</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> ECMAScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[模板字符串templat-string(es6-2)]]></title>
      <url>/2017/08/06/es6-2/</url>
      <content type="html"><![CDATA[<h5 id="一、常用模板工具库"><a href="#一、常用模板工具库" class="headerlink" title="一、常用模板工具库"></a>一、常用模板工具库</h5><ul>
<li>mustache[mə’stɑːʃ]  胡子</li>
<li>淘宝模板工具库</li>
</ul>
<p><br></p>
<h5 id="二、模板字符串的写法"><a href="#二、模板字符串的写法" class="headerlink" title="二、模板字符串的写法"></a>二、模板字符串的写法</h5><ul>
<li>传统方式使用+号拼接字符串</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 传统字符串拼接</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"mars"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我的名字叫:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>es6中拼接字符串使用反引号``，将需要拼接的内容写在反引号里面；如果需要使用变量，即${变量名}</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// es6中引用变量${variableName}</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`我今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>评论内容：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交评论<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    var text1 = document.querySelector("#text1");
    var text2 = document.querySelector("#text2");
    var btn = document.querySelector("#btn");
    var contentBox = document.querySelector("#content-box");
    btn.onclick = function () {
        var liobj = document.createElement("li");
        /*
        // 传统字符串拼接很容易出错，且不易维护
        liobj.innerHTML = '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>'+text1.value+'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>' +
               '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>'+text2.value+'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>';
        */
        liobj.innerHTML = `
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${text1.value}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>${text2.value}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
        `;
        contentBox.appendChild(liobj);
    }
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> ECMAScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[let/const/var的对比(es6-1)]]></title>
      <url>/2017/08/06/es6-1/</url>
      <content type="html"><![CDATA[<h5 id="js中的变量修饰符"><a href="#js中的变量修饰符" class="headerlink" title="js中的变量修饰符"></a>js中的变量修饰符</h5><ol>
<li>var    –&gt;函数作用域</li>
<li>let –&gt;块作用域 (es6中)</li>
<li>const –&gt;常量不可改，对象不可改，对象内部属性可改 (es6中)</li>
</ol>
<p><br></p>
<h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><ul>
<li>js中只有函数作用域<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//函数内部都属于函数作用域</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//外面不可访问  会报错</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<ul>
<li>js中没有块作用域<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//花括号内的范围都属于块作用域,但js中不存在块作用域，所以外面可以访问花括号里面的内容</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可以访问a  10</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<ul>
<li>闭包的原理<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在一个函数中定义的变量，当这个函数调用完后，变量就会被销毁；如果有</span>
<span class="token comment" spellcheck="true">//外部变量指向函数内部的引用，导致函数里面定义的变量无法释放,就实现了闭包</span>
<span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> closure <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> closure<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> closure <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//20</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><br></p>
<h5 id="var-let-const的区别"><a href="#var-let-const的区别" class="headerlink" title="var/let/const的区别"></a>var/let/const的区别</h5><ul>
<li>var</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.定义一个常量，使用大写的方式去定义，这个只是人为的约定，值可以被修改</span>
<span class="token keyword">var</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>    
PI <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//值已经改变</span>

<span class="token comment" spellcheck="true">// 2.被const修饰的变量不能被修改</span>
<span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
pi <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//不能被修改</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//报错</span>

<span class="token comment" spellcheck="true">// 3.var声明的变量在块外可以被调用，即没有块作用域</span>
<span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 块作用域内部</span>
  <span class="token punctuation">}</span>
  constlo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//i在for循环块作用域外可以被使用</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>let</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.javascript中没有块{}作用域</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
  <span class="token comment" spellcheck="true">//因为js中没有块作用域，i是全局变量，每次遍历i的值都会被改变，最后i的值是10</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>
a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//可访问i</span>

<span class="token comment" spellcheck="true">// 2.使用一对花括号{}代表代码块，被let修饰的变量在块内有效，块外无效</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//for循环内部就是i的作用域</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>
a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不可访问i</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>const </li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.被const修饰的变量不能被修改</span>
<span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
pi <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//不能被修改</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//报错</span>


<span class="token comment" spellcheck="true">// 2.被const修饰的对象是不可更改的，但是对象内部的属性是可以被更改的</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name <span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>
  age <span class="token punctuation">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//19</span>
obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//报错</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> ECMAScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设备分辨率及像素]]></title>
      <url>/2017/08/04/js-device-screen/</url>
      <content type="html"><![CDATA[<h5 id="参考设备iphone5"><a href="#参考设备iphone5" class="headerlink" title="参考设备iphone5"></a>参考设备iphone5</h5><blockquote>
<p>分辨率：  640px * 1136px</p>
<p>设备像素比 =  640(物理像素) /  320(独立像素) = 2</p>
</blockquote>
<p><br></p>
<h5 id="像素相关"><a href="#像素相关" class="headerlink" title="像素相关"></a>像素相关</h5><blockquote>
<p>1.什么是设备像素比devicePixelRatio？（设备像素比 = 设备物理像素/设备独立像素）</p>
<p>2.什么是设备物理像素？简单地说就是竖向手持设备的x轴的像素值，如640*1136中的640就是物理像素</p>
<p>3.什么是设备独立像素(dip)？简单地来说设备独立像素就是：独立于设备的用于逻辑上衡量像素的单位。如320px</p>
<p>4.window.devicePixelRatio是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。</p>
</blockquote>
<p><br></p>
<h5 id="视口相关"><a href="#视口相关" class="headerlink" title="视口相关"></a>视口相关</h5><blockquote>
<p>视口分 3 种</p>
<ol>
<li>布局视口  960px ，布局视口不会被改变的</li>
<li>可视视口  即设备上可见的视口，使用手指缩放时改变的是可视视口的大小</li>
<li>理想视口  是指布局视口在一个设备上的最佳尺寸，便于使用浏览器浏览，阅读</li>
</ol>
</blockquote>
<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--  指定下面的代码后，布局视口就成为理想视口，阅读体验会更好，网页不会出现被放大的效果 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token comment" spellcheck="true">&lt;!--  还可以这样 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,
                               minimum-scale<span class="token punctuation">=</span>1.0,    //最小的缩放比例
                               maximum-scale<span class="token punctuation">=</span>1.0,    //最大的缩放比例
                               user-scalable<span class="token punctuation">=</span>no        //禁用用户缩放
                               <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="单位相关"><a href="#单位相关" class="headerlink" title="单位相关"></a>单位相关</h5><blockquote>
<p>px/em/rem的区别</p>
<p>1.1px = 1像素，使用px作为单位是可控性比较强，可以100%还原设计稿  </p>
<p>2.em是相对长度单位:<br>  　　em 相对参考物为父元素的font-size，父元素没有设置font-size就找祖先元素的font-size<br>  　　em具有继承的特点<br>  　　当没有设置font-size时，浏览器会有一个默认的em值，即1em=16px<br>  　　em的参考物很不稳定，所以有时会出现混淆的效果，使用过程中一定要逐级确认 </p>
<p>3.rem是先对于html为参考物的长度单位（ie8不支持）<br>  　　rem和em没有多大的区别，只是相对参考物不同，rem单位的长度以根元素html所设置的font-size为准</p>
</blockquote>
<h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>1.当在媒体查询中使用rem作为单位时，rme会以浏览器的默认值作为相对长度值，即1rem = 16px，不再是以html作为相对长度了(媒体查询的优先级比较高，会先html中的样式)</p>
<p>2.在媒体查询中建议使用em,em的兼容性更好</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设备 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web App]]></title>
      <url>/2017/08/04/web-app/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webApp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[window]]></title>
      <url>/2017/08/04/js-window/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[链接世界的桥梁TCP/IP]]></title>
      <url>/2017/08/04/tcp-ip/</url>
      <content type="html"><![CDATA[<blockquote>
<p>TCP/IP是一种网络传输协议的总称，可以分为4层<br>1.应用层（Telnet、FTP和Email等）FTP、Telnet、SMTP、HTTP、RIP、NFS、DNS<br>2.运输层（TCP协议、UDP协议）<br>3.网络层（IP、ICMP、IGMP等）IP协议、ICMP协议、ARP协议、RARP协议<br>4.链路层（设备驱动程序）</p>
</blockquote>
<p><br></p>
<blockquote>
<p>TCP/IP通常指的是TCP/IP协议簇，是一组不同的协议组合在一起勾成的协议簇，上文中列举了四种不同层次的协议。<br>1.FTP、HTTP是一种应用层协议<br>2.TCP是一种运输层协议<br>3.IP是一种网络层协议<br>4.以太网协议则应用于链路层上</p>
</blockquote>
<p><br></p>
<blockquote>
<p>在TCP/I P协议族中，网络层IP提供的是一种不可靠的服务。也就是说，它只是尽可能快地把分组从源结点送到目的结点，但是并不提供任何可靠性保证。而另一方面， TCP在不可靠的IP层上提供了一个可靠的运输层。为了提供这种可靠的服务，TCP采用了超时重传、发送和接收端到端的确认分组等机制。 </p>
</blockquote>
<p><br></p>
<blockquote>
<p>域名系统<br>在TCP/IP领域中，域名系统（DNS）是一个分布的数据库，由它来提供IP地址和主机名之间的映射信息.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript的特征]]></title>
      <url>/2017/08/01/js-feature/</url>
      <content type="html"><![CDATA[<h5 id="Javascript的特征"><a href="#Javascript的特征" class="headerlink" title="Javascript的特征"></a>Javascript的特征</h5><blockquote>
<p>JavaScript是一种基于对象和事件驱动的客户端脚本语言，并具有相对的安全性，主要用于创建交互性较强的动态页面。其主要特点介绍如下。</p>
<ol>
<li>基于对象</li>
<li>事件驱动</li>
<li>解析性语言</li>
<li>实时性</li>
<li>动态性</li>
<li>跨平台</li>
<li>开发使用简单</li>
<li>相对安全性</li>
</ol>
</blockquote>
<p><b>1. 基于对象:</b> JavaScript是基于对象的脚本编程语言，能通过DOM(文档结构模型)及自身提供的对象和操作方法来实现所需的功能。</p>
<p><b>2. 事件驱动:</b> JavaScript采用事件驱动方式，能响应键盘，鼠标及浏览器窗口事件等，并执行指定的操作。</p>
<p><b>3. 解释性语言:</b> JavaScript是一种解释性脚本语言，无需专门的编译器进行编译，在嵌入JavaScript脚本的HTML文档被浏览器载入时逐行地解释，大量节省客户端与服务器端进行数据交互的时间。</p>
<p><b>4. 实时性:</b> JavaScript事件处理是实时性的，无需经服务器可对客户端的事件做出响应，并用处理结果实时更新目标页面。</p>
<p><b>5. 动态性:</b> JavaScript提供简单高效的语言流程，灵活处理对象的各种方法和属性，同时及时响应文档页面事件，实现页面的交互性和动态性。</p>
<p><b>6. 跨平台:</b> JavaScript脚本的正确运行依赖于浏览器，而与具体的操作系统无关。只要客户端装有支持JavaScript脚本的浏览器，JavaScript脚本运行结果就能正确反映在客户端浏览器平台上。</p>
<p><b>7. 开发使用简单:</b> JavaScript基本结构类似于C语言，采用小程序段的方式编程，并提供了简易的开发平台和便捷的开发流程，既能嵌入到HTML文档中供浏览器解释执行，同时JavaScript的变量类型是弱类型，使用不严格。</p>
<p><b>8. 相对安全性:</b> JavaScript是客户端脚本，通过浏览器解释执行。它不允许直接访问本地计算机，并且不能将数据存到服务器上，它也不允许对网络文档进行修改和删除，只能通过浏览器实现信息浏览或动态交互，从而有效地防止数据的丢失。</p>
<blockquote>
<p>综合上述，JavaScript是一种有着较强生命力和发展潜力的脚本描述语言，可被直接嵌入到HTML文档中，供浏览器解释执行；直接响应客户端事件，如验证数据表单合法性等，并调用相应的处理方法，迅速返回处理结果并更新页面，实现 Web交互性和动态的要求。同时将大部分的工作交给客户端处理，将Web服务器资源服务器消耗降到最低。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> js特征 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[scroll家族]]></title>
      <url>/2017/05/04/js-scroll/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> scroll </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[offset家族]]></title>
      <url>/2017/04/01/js-offset/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> offset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js 异步加载的4种方法]]></title>
      <url>/2017/03/19/js-async/</url>
      <content type="html"><![CDATA[<h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><blockquote>
<p>$(document).ready<br>需要jquery<br>兼容所有浏览器<br>说明：先出现“加载完成！”的对话框，点确定后才会出现图片,即ready方法在dom解析结束后就执行里面的代码，不需要等页面的外部资源加载完成后才执行</p>
</blockquote>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            $(document).ready(function() {
              alert("加载完成！");
            });
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lhy1024.top/images/home-header.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h5>]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 异步 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ajax异步请求(http请求)]]></title>
      <url>/2017/03/09/js-ajax/</url>
      <content type="html"><![CDATA[<h5 id="一次完整的http请求"><a href="#一次完整的http请求" class="headerlink" title="一次完整的http请求"></a>一次完整的http请求</h5><p>当我们在浏览器的地址栏中输入一个url地址时（如：www.baidu.com）都经历了那些步骤？</p>
<blockquote>
<p>1.域名解析（DNS）<br>2.发起TCP的3次握手，建立TCP链接<br>3.浏览器向服务器发送http请求<br>4.服务器接收到http请求后处理请求并返回指定格式的文件<br>5.浏览器接收到服务器返回的数据后进行数据解析成html文件<br>6.浏览器解析并访问页面中引用的外部文件<br>7.浏览器将解析后的页面展示在用户面前</p>
</blockquote>
<p><br></p>
<h5 id="一个请求的组成部分（浏览器端）"><a href="#一个请求的组成部分（浏览器端）" class="headerlink" title="一个请求的组成部分（浏览器端）"></a>一个请求的组成部分（浏览器端）</h5><blockquote>
<p>1.请求行(请求所使用的方法、url、协议等)<br>2.请求头(包含客服端环境信息和身份验证信息等)<br>3.空行<br>4.请求体(要提交的查询字符串信息或表单信息等，请求数据不是必须的)</p>
</blockquote>
<p><br></p>
<h5 id="一个响应的组成部分-服务器端"><a href="#一个响应的组成部分-服务器端" class="headerlink" title="一个响应的组成部分(服务器端)"></a>一个响应的组成部分(服务器端)</h5><blockquote>
<p>1.响应行(响应内容的状态码)<br>2.响应头(包含服务器的信息，如：服务器类型、日期时间、内容类型和长度等)<br>3.空行<br>4.响应体(即响应正文，该内容是我们需要处理的主体)</p>
</blockquote>
<p><br></p>
<h5 id="状态码的类型"><a href="#状态码的类型" class="headerlink" title="状态码的类型"></a>状态码的类型</h5><p>http状态码由三位数字组成，首位数字定义状态码的类型</p>
<blockquote>
<p>1xx: 信息性状态码  </p>
<blockquote>
<p>100, 101  </p>
</blockquote>
<p>2xx: 成功状态码</p>
<blockquote>
<p>200：OK</p>
</blockquote>
<p>3xx: 重定向状态码</p>
<blockquote>
<p>301: 永久重定向, Location响应首部的值仍为当前URL，因此为隐藏重定向;<br>302: 临时重定向，显式重定向, Location响应首部的值为新的URL<br>304：Not Modified  未修改，比如本地缓存的资源文件和服务器上比较时，发现并没有修改，服务器返回一个<br>304状态码，告诉浏览器，你不用请求该资源，直接使用本地的资源即可。</p>
</blockquote>
<p>4xx: 客户端错误状态码</p>
<blockquote>
<p>404: Not Found  请求的URL资源并不存在</p>
</blockquote>
<p>5xx: 服务器端错误状态码</p>
<blockquote>
<p>500: Internal Server Error  服务器内部错误<br>502: Bad Gateway  前面代理服务器联系不到后端的服务器时出现<br>504：Gateway Timeout  这个是代理能联系到后端的服务器，但是后端的服务器在规定的时间内没有给代理服务器响应</p>
</blockquote>
</blockquote>
<p><br></p>
<h5 id="HTTP是一种无状态的协议"><a href="#HTTP是一种无状态的协议" class="headerlink" title="HTTP是一种无状态的协议"></a>HTTP是一种无状态的协议</h5><p>HTTP协议是无状态的(即不建立持久的链接)<br>当浏览器向服务器发送一个http请求后，服务器对请求做出响应后就会断开链接，整个过程服务器不会保存任何的状态</p>
<p><br></p>
<h5 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h5><blockquote>
<p>1.Ajax全称：Asynchronous Javascript and XML(异步的javascript和xml)</p>
<p>2.Ajax不是某种编程语言，而是一种无须重新加载整个页面的情况下更新某一部分数据的技术</p>
<p>3.浏览器可以通过XMLHttpRequest对象和服务器进行数据交互，并且不会刷新整个页面</p>
<p>4.XMLHttpRequest不支持IE5、IE6，如果需要支持IE5、IE6就需要通过</p>
<p><code>new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</code> 创建对象发送异步请求</p>
</blockquote>
<p><br></p>
<h5 id="原生ajax写法"><a href="#原生ajax写法" class="headerlink" title="原生ajax写法"></a>原生ajax写法</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**
 * @param url 请求的url地址
 */</span>
<span class="token keyword">function</span> <span class="token function">ajaxGET</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 1.创建XMLHttpRequest对象</span>
    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span>
        xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 2.初始化请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 3.发送请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 4.获取响应数据</span>
    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 5.处理响应数据</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * @param url
 * @param stringData 字符串类型的数据
 */</span>
<span class="token keyword">function</span> <span class="token function">ajaxPost</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>stringData<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 1.创建XMLHttpRequest对象</span>
    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span>
        xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 2.初始化请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 3.发送请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>stringData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 4.获取响应数据</span>
    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 5.处理响应数据</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="XMLHttpRequest的生命周期"><a href="#XMLHttpRequest的生命周期" class="headerlink" title="XMLHttpRequest的生命周期"></a>XMLHttpRequest的生命周期</h5><blockquote>
<p>创建</p>
<p>初始化请求</p>
<p>发送请求</p>
<p>接收数据</p>
<p>解析数据</p>
<p>完成(数据就绪并可使用)</p>
</blockquote>
<p><br></p>
<h5 id="监听readystate状态的变化"><a href="#监听readystate状态的变化" class="headerlink" title="监听readystate状态的变化"></a>监听readystate状态的变化</h5><blockquote>
<p>0 : 请求未初始化，open()还没有调用</p>
<p>1 : 服务连接已建立，send()已经调用了</p>
<p>2 : 接收数据完成(即服务器端响应的原始数据已接收完成，但浏览器不识别)</p>
<p>3 : 响应数据解析中(此时浏览器已经拿到响应体了，正在解析为浏览器支持的格式)</p>
<p>4 : 请求已完成(数据已就绪，即响应数据已解析为浏览器支持的格式)</p>
</blockquote>
<p><br></p>
<h5 id="XMLHttpRequest获取响应数据的属性或方法"><a href="#XMLHttpRequest获取响应数据的属性或方法" class="headerlink" title="XMLHttpRequest获取响应数据的属性或方法"></a>XMLHttpRequest获取响应数据的属性或方法</h5><pre><code>responseText 获得字符串形式的响应数据
responseXML 获得xml形式的响应数据
status与statusText 以数字形式或文本形式返回http的状态码
getAllResponseHeaders() 获取所有的响应报头
getResponseHeader()    查询响应中的某个字段的值
</code></pre><p><br></p>
<h5 id="JSON中可以使用如下数据类型作为键的值"><a href="#JSON中可以使用如下数据类型作为键的值" class="headerlink" title="JSON中可以使用如下数据类型作为键的值"></a>JSON中可以使用如下数据类型作为键的值</h5><blockquote>
<p>1.数字</p>
<p>2.字符串</p>
<p>3.boolean</p>
<p>4.数组</p>
<p>5.对象</p>
<p>6.null</p>
</blockquote>
<p><br></p>
<h5 id="JSON的解析方法"><a href="#JSON的解析方法" class="headerlink" title="JSON的解析方法"></a>JSON的解析方法</h5><blockquote>
<p>序列化与反序列化</p>
<p>1.JSON.parse(data);        // </p>
<p>2.JSON.stringify(data);        // 序列化为json字符串</p>
</blockquote>
<p><br></p>
<h5 id="jQuery实现Ajax"><a href="#jQuery实现Ajax" class="headerlink" title="jQuery实现Ajax"></a>jQuery实现Ajax</h5><blockquote>
<p>jQuery.ajax([settings]);</p>
<p>1.type : 方法的类型，GET/POST，默认GET</p>
<p>2.url : 发送请求的地址</p>
<p>3.data : 对象，连同请求一同发送到服务器端的数据</p>
<p>4.dataType : 预期服务器返回的数据类型</p>
<p>5.success : 成功后的回调函数，参数是请求成功后返回的数据</p>
<p>6.error : 失败时的回调，参数是XMLHttpRequest对象</p>
</blockquote>
<p><br></p>
<h5 id="百度静态资源库中的jQuery文件"><a href="#百度静态资源库中的jQuery文件" class="headerlink" title="百度静态资源库中的jQuery文件"></a>百度静态资源库中的jQuery文件</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://apps.bdimg.com/libs/jquery/1.11.1/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><br></p>
<h5 id="服务器端常用的脚本语言及数据库"><a href="#服务器端常用的脚本语言及数据库" class="headerlink" title="服务器端常用的脚本语言及数据库"></a>服务器端常用的脚本语言及数据库</h5><blockquote>
<p>语言</p>
<p>1.PHP</p>
<p>2.Java</p>
<p>3.NET</p>
<p>数据库</p>
<p>1.MySQL</p>
<p>2.Oracle</p>
<p>3.SQL Server</p>
</blockquote>
<p><br></p>
]]></content>
      
        <categories>
            
            <category> Ajax </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[call()/apply()改变this的指向]]></title>
      <url>/2017/02/04/js-call-apply/</url>
      <content type="html"><![CDATA[<h5 id="call-与apply"><a href="#call-与apply" class="headerlink" title="call()与apply()"></a>call()与apply()</h5><blockquote>
<p><strong>call() 和 apply()</strong>都是为了改变被调用的函数内部的上下文<strong>（context）</strong>而存在的，即改变被调用的函数内部的this指向;</p>
<p><strong>call() 和 apply()</strong>二者的作用完全一样，只是接受参数的方式不太一样;</p>
</blockquote>
<p><br></p>
<h5 id="一、call"><a href="#一、call" class="headerlink" title="一、call()"></a>一、call()</h5><blockquote>
<p>1.语法：function.call(thisArg, arg1, arg2, arg…);</p>
<p>2.语法参数说明：call()方法调用一个函数function, 其具有一个指定的<strong>this</strong>值和<strong>分别</strong>提供的参数</p>
<p>3.作用：可以让call()中的对象调用当前对象所拥有的函数<br>　　　- call()中的对象指的是：thisArg,即传递到call()方法中的this<br>　　　- 当前对象指的是：function对象</p>
<p>4.区别：和apply()的区别在于传递的参数不同，apply传递的参数是一个数组或伪数组</p>
<p>5.非严格模式中：this为<code>null</code>和<code>undefined</code>时会自动指向全局对象(window对象)</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.案例：使用Food构造函数创建的对象实例拥有在Product构造函数中添加的name属性和price属性,但category属性是在Food的构造函数中定义的。</span>
<span class="token comment" spellcheck="true">// 使用call()实现继承父构造函数中的成员</span>
<span class="token keyword">function</span> Product <span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"的价格：￥"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">RangeError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"的价格不能为负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抛出错误</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> Food <span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Product<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用call()方法调用父构造函数可以实现继承</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> <span class="token string">"food"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 等同于</span>
<span class="token keyword">function</span> Food <span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"的价格：￥"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">RangeError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"的价格不能为负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> <span class="token string">"food"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> objFood <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Food</span><span class="token punctuation">(</span><span class="token string">"大米"</span><span class="token punctuation">,</span> <span class="token string">"2.50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objFood<span class="token punctuation">)</span><span class="token punctuation">;</span>
objFood<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 2.实现继承</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>   
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   
  <span class="token keyword">this</span><span class="token punctuation">.</span>showName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   
  <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>   

<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  
  Animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>   

<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Black Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
cat<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Black Cat</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 3.使用call()调用匿名函数</span>
<span class="token comment" spellcheck="true">/*
在下例中的for循环体内，我们创建了一个匿名函数，然后通过调用该函数的call方法，将每个数组元素作为指定的this值执行了那个匿名函数。这个匿名函数的主要目的是给每个数组元素对象添加一个print方法，这个print方法可以打印出各元素在数组中的正确索引号。当然，这里不是必须得让数组元素作为this值传入那个匿名函数（普通参数就可以），目的是为了演示call的用法。
*/</span>
<span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>species<span class="token punctuation">:</span> <span class="token string">'Lion'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'King'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>species<span class="token punctuation">:</span> <span class="token string">'Whale'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Fail'</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> animals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>print <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token operator">+</span> i  <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>species <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//#0 Lion: King        //#1 Whale: Fail</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>animals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="二、apply"><a href="#二、apply" class="headerlink" title="二、apply"></a>二、apply</h5><blockquote>
<p>1.语法：function.apply(thisArg, [argsArray]);</p>
<p>2.语法参数说明：apply()方法调用一个函数function, 其具有一个指定的this值和数组或伪数组</p>
<p>3.作用：可以让apply()中的对象调用当前对象所拥有的函数<br>　　　- apply()中的对象指的是：thisArg,即传递到apply()方法中的this<br>　　　- 当前对象指的是：function对象</p>
<p>4.区别：和call()的区别在于传递的参数不同，call()传递的参数是一个个的参数</p>
<p>5.非严格模式中：this为　<code>null</code>　和<code>undefined</code>时会自动指向全局对象(window对象)</p>
<p>6.Chrome14 以及 Internet Explorer 9仍然不接受伪数组对象。如果传入伪数组对象，它们会抛出异常</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span>方法能接收两个参数：
obj：这个对象将代替Function类里<span class="token keyword">this</span>对象
args：这个是数组或类数组，apply方法把这个集合中的元素作为参数传递给被调用的函数。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 3. 案例：apply()与call()参数对比</span>
<span class="token comment" spellcheck="true">// 参数是数据列表</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//[1, 2, 3, 6, 7]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 参数是数组</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, 2, 3, 4, 5, 6]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[4, 5, 6]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 使用别人的方法，此时foo中的logName方法将被bar引用 ，this指向了bar</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">"明明"</span><span class="token punctuation">,</span>
    logName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> bar<span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">"白白"</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span>logName<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//白白</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="三、判断数据类型"><a href="#三、判断数据类型" class="headerlink" title="三、判断数据类型"></a>三、判断数据类型</h5><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//[object Number]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//[object String]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//[object Undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//[object Boolean]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//[object Object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//[object Array]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//[object Function]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="四、严格模式与非严格模式的this指向"><a href="#四、严格模式与非严格模式的this指向" class="headerlink" title="四、严格模式与非严格模式的this指向"></a>四、严格模式与非严格模式的this指向</h5><ul>
<li>在非严格模式下当我们第一个参数传递为null或undefined时，函数体内的this会指向默认的宿主对象，在浏览器中则是window</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
test<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>
test<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在<strong>ECMAScript 5</strong>的<strong>strict</strong>模式下，这种情况下的this已经被规定为不会指向全局对象<strong>window</strong>，而是<strong>undefined</strong></li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">"use strict"</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// undefined</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="五、缓存this对象在开发中也很常见"><a href="#五、缓存this对象在开发中也很常见" class="headerlink" title="五、缓存this对象在开发中也很常见"></a>五、缓存this对象在开发中也很常见</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.没有缓存this时,this指向window</span>
window<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token string">"window"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//test</span>
      <span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//window</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 2.缓存this</span>
window<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token string">"window"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//test</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 3.推荐使用call()或apply()</span>
window<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token string">"window"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//test</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> this </tag>
            
            <tag> call </tag>
            
            <tag> apply </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js中创建对象的方式]]></title>
      <url>/2017/01/04/js-create-object/</url>
      <content type="html"><![CDATA[<h5 id="js中创建对象的方式"><a href="#js中创建对象的方式" class="headerlink" title="js中创建对象的方式"></a>js中创建对象的方式</h5><blockquote>
<p>1.字面量的方式创建对象</p>
<p>2.使用new关键字创建对象</p>
<p>3.使用构造函数创建对象</p>
<p>4.使用原型继承创建对象</p>
</blockquote>
<p>1.字面量的方式创建对象</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name <span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>
    age <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    sayHi <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你好啊！我是："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2.使用new关键字创建对象</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 动态的给对象添加属性，js是一种动态的语言</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 123</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>3.使用构造函数创建对象</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Cat <span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑得快"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"coco"</span><span class="token punctuation">,</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// coco</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// white</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4.使用原型继承创建对象</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**
* 使用对象原型创建新的实例
* @param obj 是被创建出来的对象的原型对象
* @returns 返回对象
*/</span>
<span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> TypeError<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 当obj为空时抛出错误</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>create<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 存在Object.create</span>
        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 创建新的对象并返回</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 判断obj的类型</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> TypeError<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 不是对象或函数就返回类型错误</span>
    <span class="token comment" spellcheck="true">// 只有是对象或函数才创建对象，并返回</span>
    <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="使用构造函数创建对象的升级"><a href="#使用构造函数创建对象的升级" class="headerlink" title="使用构造函数创建对象的升级"></a>使用构造函数创建对象的升级</h5><blockquote>
<p>1.构造函数里面只定义属性</p>
<p>2.方法放在构造函数的原型上定义。这样做的目的可以减少每次创建对象时需要的内存空间，只需开辟用于存放属性的空间就可以了，至于方法可以通过对象的内部原型 <code>.__proto__</code> 到构造函数的原型上调用需要的方法。</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 未升级的写法</span>
<span class="token keyword">function</span> Cat <span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑得快"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 第一次升级:将方法放在构造函数的原型上，这样创建出来的实例对象内部并没有run方法，</span>
<span class="token comment" spellcheck="true">// 但可以通过实例对象的内部原型__proto__属性去调用该实例对象的构造函数的原型上的run方法，</span>
<span class="token comment" spellcheck="true">// 这样做可以减少创建实例时的内存损耗</span>
<span class="token keyword">function</span> Cat <span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 在构造函数的原型上定义run方法，这样所有通过构造函数Cat创建出来的对象都可以使用run方法</span>
      run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑得快"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment" spellcheck="true">// 第二次升级：将构造函数的形参对象化，即传进一个对象，避免了参数位置要对应的问题</span>
<span class="token keyword">function</span> Cat <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> options<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> options<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
      run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑得快"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"susu"</span><span class="token punctuation">,</span>
    color<span class="token punctuation">:</span> <span class="token string">"black"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 第三次升级：将初始化属性抽取成函数，并将初始化任务交给构造函数的原型去做，构造函数只负责调用方法即可</span>
<span class="token keyword">function</span> Cat <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
      run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑得快"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    _init <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> options<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> options<span class="token punctuation">.</span>color <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="使用原型的注意事项"><a href="#使用原型的注意事项" class="headerlink" title="使用原型的注意事项"></a>使用原型的注意事项</h5><blockquote>
<p>1.使用对象访问属性的时候，如果在本身内找不到就会去原型中查找；但是使用点语法进行属性赋值的时候，并不会去原型中进行查找；使用点语法赋值的时候，如果对象中不存在该属性，就会给该对象新增该属性，而不会去修改原型中的属性（实例只使用原型不修改原型，但原型是可以被修改的）</p>
<p>2.如果在原型中的属性是引用类型的属性，那么所有的对象共享该属性，并且一个对象修改了该引用类型属性中的成员，其他对象也都会受影响 （原型中的引用类型属性被修改，其他引用该属性的对象的值也跟着被改变，因为引用类型的赋值是一个地址）</p>
<p>3.一般情况下不会将属性放到原型对象中，一般情况下原型中只会放需要共享的方法</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 构造函数</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 字面量对象</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>
      brand<span class="token punctuation">:</span><span class="token string">"laosilaisi"</span><span class="token punctuation">,</span>
      type<span class="token punctuation">:</span><span class="token string">"huanying"</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 为Person构造函数的原型添加属性，该属性是一个引用类型的</span>
Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>car <span class="token operator">=</span> x<span class="token punctuation">;</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>car<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// laosilaisi</span>

<span class="token comment" spellcheck="true">// 替换Person原型上的属性car的引用(此时的car指向另一个对象，该对象已经不是x了)</span>
Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>car <span class="token operator">=</span> <span class="token punctuation">{</span>
      brand<span class="token punctuation">:</span><span class="token string">"BYD"</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>car<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// BYD</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>car<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// BYD    </span>

p<span class="token punctuation">.</span>car <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 为p对象添加一个car属性，此时的p只会使用自身的car属性，不会再去原型对象上找car属性了</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>car<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  在自身找到car属性  undefied</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js基础面试题]]></title>
      <url>/2016/11/18/web-interview/</url>
      <content type="html"><![CDATA[<h5 id="1-js中的数据类型"><a href="#1-js中的数据类型" class="headerlink" title="1-js中的数据类型"></a>1-js中的数据类型</h5><blockquote>
<p>1.string</p>
<p>2.number</p>
<p>3.boolean</p>
<p>4.undefined</p>
<p>5.null</p>
<p>6.object</p>
</blockquote>
<p>基本数据类型有(值类型):string、number、boolean、undefined</p>
<p>引用数据类型有(引用类型):object、null</p>
<blockquote>
<p>值类型在赋值的时候会将数据复制一份进行赋值，各自的改变不会影响到对方   </p>
<p>引用类型间相互赋值时赋值的是引用的地址。这个地址指向的是同一个对象，任何一个发生改变， 其他引用同一个地址的对象也发生改变</p>
</blockquote>
<p><br></p>
<h5 id="2-js的内置对象"><a href="#2-js的内置对象" class="headerlink" title="2-js的内置对象"></a>2-js的内置对象</h5><pre><code>1、Arguments            //函数参数集合    //arguments[&#39;ɑːgjʊm(ə)nts]参数/
2、Array                //数组
3、Boolean            //布尔对象
4、Date                //日期时间对象
5、Error                //异常对象
6、Function            //函数构造器
7、Math                //数学对象
8、Number            //数组对象
9、Object            //基础对象
10、RegExp            //正则表达式对象
11、Global            // 全局对象        //windou对象已经把global对象的方法实现了
</code></pre><p><br></p>
<h5 id="3-等于和全等于的区别"><a href="#3-等于和全等于的区别" class="headerlink" title="3-等于和全等于的区别"></a>3-等于和全等于的区别</h5><blockquote>
<p>== 只判断值是否相等。如：console.log(null == undefined); //true</p>
<p>=== 判断值和类型是否相等。如： console.log(null === undefined); //false  </p>
</blockquote>
<p><br></p>
<h5 id="4-for-in-循环"><a href="#4-for-in-循环" class="headerlink" title="4-for in 循环"></a>4-for in 循环</h5><p>for in 操作对象</p>
<blockquote>
<p>1.for(key in obj):遍历对象的键</p>
<p>2.obj[key]:取对象的键所对应的值</p>
<p>3.一般使用for in 遍历对象是否包含某个属性，属性就是key对应的字符串  </p>
</blockquote>
<p>for in 操作数组</p>
<blockquote>
<p>1.var arr = [4, 6, 3, 4];</p>
<p>2.在数组中key就是索引index,如：for(index in arr):遍历数组的索引。结果：0 1 2 3</p>
<p>3.arr[index]:取数组的键所对应的值。结果：4 6 3 4</p>
<p>4.对象名[属性名],注意这里的属性名 是字符串,在遍历index时会将index隐式转换为字符串</p>
<p>5.如果需要判断一个数组中是否包含某个值，有两种方法，最好通过arr.indexOf(3),结果是返回值第一次被找 到时的索引2，如果值不存在就返回-1</p>
</blockquote>
<p><br></p>
<h5 id="5-delete关键字"><a href="#5-delete关键字" class="headerlink" title="5-delete关键字"></a>5-delete关键字</h5><blockquote>
<p>1.delete可以删除对象的属性，返回值为是否删除成功。如：delete obj.name;</p>
<p>2.delete可以删除未使用var声明的变量</p>
<p>3.delete可以删除对象中不存在的变量，结构也是返回true</p>
<p>4.delete不能删除原型上的变量，不管这个变量是否存在自定义的对象中。如：delete obj.toString(); 结构也是true  </p>
<p>//delete关键字可以用来删除对象的属性，还有未使用var声明的变量</p>
<p>//delete关键字有返回值 用来表示删除属性是否成功</p>
<p>//如果删除的是不存在的属性，返回值为true</p>
<p>//如果删除的属性存在原型当中，那么返回值为true，但是并未删除</p>
</blockquote>
<p> <br></p>
<h5 id="6-break和continue及return的区别"><a href="#6-break和continue及return的区别" class="headerlink" title="6-break和continue及return的区别"></a>6-break和continue及return的区别</h5><blockquote>
<p>1.continue结束本次循环，继续执行下一次循环 </p>
<p>2.break是跳出整个循环或结束整个循环  </p>
<p>3.return是跳出或结束当前所在的函数</p>
</blockquote>
<p><br></p>
<h5 id="7-return的作用"><a href="#7-return的作用" class="headerlink" title="7-return的作用"></a>7-return的作用</h5><blockquote>
<p>1.在函数内使用</p>
<p>2.在函数内可写可不写，看情况</p>
<p>3.结束函数并返回运行结果</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内置对象String]]></title>
      <url>/2016/10/11/js-string/</url>
      <content type="html"><![CDATA[<h4 id="String-对象属性"><a href="#String-对象属性" class="headerlink" title="String 对象属性"></a>String 对象属性</h4><blockquote>
<p>1.prototype : 允许向对象添加属性和方法</p>
<p>2.length : 字符串的长度，从1开始</p>
<p>3.constructor: 返回创建String实例属性的构造函数</p>
</blockquote>
<p><br></p>
<h4 id="String-对象方法"><a href="#String-对象方法" class="headerlink" title="String 对象方法"></a>String 对象方法</h4><h5 id="1-string-charAt-index"><a href="#1-string-charAt-index" class="headerlink" title="1.string.charAt(index);"></a>1.string.charAt(index);</h5><blockquote>
<p><strong>返回值：</strong> 角标对应的字符(不改变原字符串)</p>
<p><strong>提示：</strong> index必须的</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例1：获取最后一个字符</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"HELLO WORLD"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// D</span>

<span class="token comment" spellcheck="true">// 案例2：获取第一个字符</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"HELLO WORLD"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// H</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2-string-charCodeAt-index"><a href="#2-string-charCodeAt-index" class="headerlink" title="2.string.charCodeAt(index);"></a>2.string.charCodeAt(index);</h5><blockquote>
<p><strong>返回值：</strong> 角标对应的字符在Unicode 编码表上的位置(不改变原字符串)</p>
<p><strong>提示：</strong> index必须的</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  案例1：A-Z的unicode编码    [65, 90]</span>
<span class="token comment" spellcheck="true">//    a-z[97-122]</span>
<span class="token comment" spellcheck="true">//    0-9[48-57]</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"A-Z"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 65</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 90</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="3-String-fromCharCode-n1-n2-…-nX"><a href="#3-String-fromCharCode-n1-n2-…-nX" class="headerlink" title="3.String.fromCharCode(n1, n2, …, nX);"></a>3.String.fromCharCode(<em>n1</em>, <em>n2</em>, …, <em>nX</em>);</h5><blockquote>
<p><strong>返回值：</strong> 将 Unicode 编码转为字符</p>
<p><strong>提示：</strong> 是一个静态方法</p>
</blockquote>
<h5 id="4-string-concat-string1-string2-…-stringX"><a href="#4-string-concat-string1-string2-…-stringX" class="headerlink" title="4.string.concat(string1, string2, …, stringX)"></a>4.<em>string</em>.concat(<em>string1</em>, <em>string2</em>, …, <em>stringX</em>)</h5><blockquote>
<p><strong>返回值：</strong> 一个连接后的新的字符串(不改变原字符串)</p>
<p><strong>提示：</strong> index必须的</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">"Hello "</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2<span class="token operator">=</span><span class="token string">"world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str3<span class="token operator">=</span><span class="token string">" Have a nice day!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Hello world! Have a nice day!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="5-string-indexOf-searchvalue-start"><a href="#5-string-indexOf-searchvalue-start" class="headerlink" title="5.string.indexOf(searchvalue,start);"></a>5.<em>string</em>.indexOf(<em>searchvalue</em>,<em>start</em>);</h5><blockquote>
<p><strong>返回值：</strong>  返回查找的字符串第一次被找到的角标,找不到就返回-1(不改变原字符串)</p>
<p><strong>提示：</strong> 返回值类型是数字，没有查找到searchvalue值时，返回-1</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例1：不指定start时，从0开始查找</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world, welcome to the universe."</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//13</span>

<span class="token comment" spellcheck="true">// 案例2：在字符串第五个位置开始查找字符 "e" 第一次出现的位置:</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world, welcome to the universe."</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//14</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="6-string-lastIndexOf-searchvalue-start"><a href="#6-string-lastIndexOf-searchvalue-start" class="headerlink" title="6.string.lastIndexOf(searchvalue,start);"></a>6.<em>string</em>.lastIndexOf(<em>searchvalue</em>,<em>start</em>);</h5><blockquote>
<p><strong>返回值：</strong>  返回查找的字符串最后一次被找到的角标,找不到就返回-1(不改变原字符串)</p>
<p><strong>提示：</strong> 返回值类型是数字，从后面开始查找，找最后一次被找到的索引</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例1：不指定start时，从末尾开始向前查找(如果指定start,就从start开始向前查找)</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello planet earth, you are a great planet."</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"planet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//36</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="7-string-match-regexp-匹配"><a href="#7-string-match-regexp-匹配" class="headerlink" title="7.string.match(regexp)    //匹配"></a>7.<em>string</em>.match(<em>regexp</em>)    //匹配</h5><blockquote>
<p><strong>返回值：</strong>  在字符串中查找与正则表达式相匹配的值，找到匹配的就返回存放值的一个数组，找不到匹配的就返回null(不改变原字符串)</p>
<p><strong>提示：</strong> 返回值类型是一个数组</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例1：全局查找</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"HELLO WORLD! javascript is good script language"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/script/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ["script", "script"]</span>

<span class="token comment" spellcheck="true">// 案例2：全局查找字符串 "ain"，且不区分大小写:</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"The rain in SPAIN stays mainly in the plain"</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ain/gi</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ["ain", "AIN", "ain", "ain"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-string-replace-searchvalue-newvalue-替换"><a href="#8-string-replace-searchvalue-newvalue-替换" class="headerlink" title="8.string.replace(searchvalue,newvalue);    //替换"></a>8.<em>string</em>.replace(<em>searchvalue,newvalue</em>);    //替换</h5><blockquote>
<p><strong>返回值：</strong>一个新的字符串(不改变原字符串)</p>
<p><strong>提示：</strong>当找到第一个searchvalue时就不会再找第二个，但可以使用正则查找全局(即:/searchvalue/g)</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例1：只找到第一个</span>
<span class="token keyword">var</span> strM <span class="token operator">=</span> <span class="token string">"javascript is a good script language"</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strM<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//jAvascript is a good script language</span>

<span class="token comment" spellcheck="true">// 案例2：使用正则找到第一个</span>
<span class="token keyword">var</span> strM <span class="token operator">=</span> <span class="token string">"javascript is a good script language"</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strM<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/a/</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//jAvascript is a good script language</span>

<span class="token comment" spellcheck="true">// 案例3：使用正则找到所有的a,并替换为A</span>
<span class="token keyword">var</span> strM <span class="token operator">=</span> <span class="token string">"javascript is a good script language"</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strM<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/a/g</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//jAvAscript is A good script lAnguAge</span>

<span class="token comment" spellcheck="true">// 案例3：忽略大小写</span>
<span class="token keyword">var</span> strM <span class="token operator">=</span> <span class="token string">"J2r5rR"</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strM<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/r/gi</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//J1A5AA</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-string-search-searchvalue-查找匹配的值"><a href="#9-string-search-searchvalue-查找匹配的值" class="headerlink" title="9.string.search(searchvalue);    // 查找匹配的值"></a>9.<em>string</em>.search(<em>searchvalue</em>);    // 查找匹配的值</h5><blockquote>
<p><strong>返回值：</strong>一个数字类型</p>
<p><strong>提示：</strong>searchvalue是需要查找的字符串或者正则表达式，如果存在，就返回值所在的角标，不存在就返回-1</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例1：对大小写敏感</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Mr. Blue has a blue house"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//15</span>

<span class="token comment" spellcheck="true">// 案例2：忽略大小写</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Mr. Blue has a blue house"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/blue/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="10-string-slice-start-end-截取"><a href="#10-string-slice-start-end-截取" class="headerlink" title="10.string.slice(start, end);        //截取"></a>10.string.slice(start, end);        //截取</h5><blockquote>
<p><strong>返回值</strong>：新的字符串(不改变原字符串)</p>
<p><strong>提示：</strong> 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*
*    语法：string.slice(start, end);
*    start:必须的，要抽取的片断的起始下标。第一个字符位置为 0
*    end:可选的，不填就截取到字符串的最后
*/</span>

<span class="token comment" spellcheck="true">// 案例1：从0开始截取到最后</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Hello world!</span>

<span class="token comment" spellcheck="true">// 案例2：从指定位置开始截取到最后一个</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// lo world!</span>

<span class="token comment" spellcheck="true">// 案例3：从指定位置开始截取到指定下标（闭区间）</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// lo wo</span>

<span class="token comment" spellcheck="true">// 案例4：截取第一个字符</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// H</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 案例5：截取最后一个字符</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// !</span>

<span class="token comment" spellcheck="true">// 案例6：从-str.length开始</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Hello world!（相当于从0到结尾）</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="11-string-split-separator-limit-分割"><a href="#11-string-split-separator-limit-分割" class="headerlink" title="11.string.split(separator,limit)        //分割"></a>11.<em>string</em>.split(<em>separator</em>,<em>limit</em>)        //分割</h5><blockquote>
<p><strong>返回值</strong>：返回一个数组(不改变原字符串)</p>
<p><strong>提示：</strong> separator分离器，limit返回的数组的长度。如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割(案例2)</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例1：什么都不写的时候会将字符串按照一个元素添加到数组里</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"How are you doing today?"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ["How are you doing today?"]</span>

<span class="token comment" spellcheck="true">// 案例2：参数是空格时</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"How are?"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ["H", "o", "w", " ", "a", "r", "e", "?"]</span>

<span class="token comment" spellcheck="true">// 案例3：指定返回数组的长度</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"How are you doing today?"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ["How", "are", "you"]</span>

<span class="token comment" spellcheck="true">//  案例4：使用其他字符做分离器</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"How are you doing today?"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ["H", "w are y", "u d", "ing t", "day?"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="12-string-substr-start-length-提取"><a href="#12-string-substr-start-length-提取" class="headerlink" title="12.string.substr(start,length)        //提取"></a>12.<em>string</em>.substr(<em>start</em>,<em>length</em>)        //提取</h5><blockquote>
<p><strong>返回值</strong>：返回一个字符串(不改变原字符串)</p>
<p><strong>提示：</strong> 常常使用substr()来代替 substring() 和 slice()</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 从第二个角标开始提取到最后</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// llo world!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="13-string-substring-start-end-提取"><a href="#13-string-substring-start-end-提取" class="headerlink" title="13.string.substring(start,end)        //提取"></a>13.<em>string</em>.substring(<em>start</em>,end)        //提取</h5><blockquote>
<p><strong>返回值</strong>：返回一个字符串(不改变原字符串)</p>
<p><strong>提示：</strong>  左闭右开区间,参数是非负数</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 从第二个角标开始提取到最后</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// llo w</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="14-string-toLowerCast-小写"><a href="#14-string-toLowerCast-小写" class="headerlink" title="14.string.toLowerCast();    //小写"></a>14.string.toLowerCast();    //小写</h5><blockquote>
<p><strong>返回值</strong>：返回一个字符串(不改变原字符串)</p>
<p><strong>提示：</strong>  </p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//hello world!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Hello world!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="15-string-toUpperCast-大写"><a href="#15-string-toUpperCast-大写" class="headerlink" title="15.string.toUpperCast();    //大写"></a>15.string.toUpperCast();    //大写</h5><blockquote>
<p><strong>返回值</strong>：返回一个字符串(不改变原字符串)</p>
<p><strong>提示：</strong>  </p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//HELLO WORLD!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Hello world!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="16-string-trim"><a href="#16-string-trim" class="headerlink" title="16.string.trim();"></a>16.string.trim();</h5><blockquote>
<p><strong>返回值</strong>：返回一个字符串(不改变原字符串)</p>
<p><strong>提示：</strong> </p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">" Hello world! "</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//"Hello world!"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//" Hello world! "</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="17-string-valueOf-字符串原始值"><a href="#17-string-valueOf-字符串原始值" class="headerlink" title="17.string.valueOf();    //字符串原始值"></a>17.string.valueOf();    //字符串原始值</h5><blockquote>
<p><strong>返回值</strong>：返回字符串对象的原始值</p>
<p><strong>提示：</strong> 返回值自己本身</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Hello world!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h4 id="String的包装类方法"><a href="#String的包装类方法" class="headerlink" title="String的包装类方法"></a>String的包装类方法</h4><blockquote>
<p>在字符串中包装了html标签来达到某种效果</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> txt <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>字体变大: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">big</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>字体缩小: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">small</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>字体加粗: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>斜体: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">italics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>固定定位: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">fixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>加删除线: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">strike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>字体颜色: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">fontcolor</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>字体大小: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">fontsize</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>下标: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>上标: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">sup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>链接: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">"http://www.w3cschool.cc"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p>闪动文本: "</span> <span class="token operator">+</span> txt<span class="token punctuation">.</span><span class="token function">blink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" (不能用于IE,Chrome,或者Safari)&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><b>结果如下:</b></p>
<div style="text-align: center;"><img src="/imglinks/01string.png" alt="01string"></div>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 内置对象 </tag>
            
            <tag> string </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原型prototype]]></title>
      <url>/2016/09/01/prototype/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> prototype </tag>
            
            <tag> 原型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Event事件]]></title>
      <url>/2016/08/18/js-event/</url>
      <content type="html"><![CDATA[<h5 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h5><blockquote>
<ul>
<li>事件源 (Dom对象)</li>
<li>事件 (Type)</li>
<li>事件处理函数 (functionHandler)</li>
</ul>
</blockquote>
<p><br></p>
<h5 id="注册事件的方式有3种"><a href="#注册事件的方式有3种" class="headerlink" title="注册事件的方式有3种"></a>注册事件的方式有3种</h5><blockquote>
<p>1.element.type = function () {};</p>
<ol>
<li>this === element</li>
<li>所有浏览器都支持，js的原生事件都有“on”</li>
</ol>
<p>2.addEventListener(type, functionHandler, useCapture);</p>
<ol>
<li>useCapture:默认false。指定在捕捉阶段还是冒泡阶段执行(false冒泡阶段执行，true捕获阶段执行)</li>
<li>this === element</li>
<li>主流最新的浏览器都支持，ie9+也支持</li>
<li>事件类型不需要加“on”</li>
<li>解除事件：removeEventListener(type, functionHandler, false);  </li>
</ol>
<p>3 attachEvent(type, functionHandler)</p>
<ol>
<li>this === window.event</li>
<li>ie678支持该方法</li>
<li>事件类型要加“on”</li>
<li>解除事件：detachEvent(type, functionHandler);</li>
</ol>
</blockquote>
<p><br></p>
<h5 id="事件的3个阶段"><a href="#事件的3个阶段" class="headerlink" title="事件的3个阶段"></a>事件的3个阶段</h5><blockquote>
<p>1.捕获阶段(由外向里)</p>
<p>2.目标阶段</p>
<p>3.冒泡阶段(由里向外)</p>
</blockquote>
<div style="text-align: center;"><img src="/imglinks/06event.png" alt="06event"></div>

<p>绑定在被点击元素的事件是按照代码顺序发生的，其他元素通过冒泡或者捕获“感知”事件并执行，按照W3C的标准，先发生捕获事件，后发生冒泡事件。</p>
<p>所有事件的顺序是：其他元素捕获阶段事件 -&gt; 目标元素代码顺序事件 -&gt; 其他元素冒泡阶段事件 </p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>捕获与冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    var btn = document.querySelector('button');
    var div = document.querySelector('div');

    btn.addEventListener('click', function(){    //  先执行，目标元素代码按顺序执行
        console.log('bubble','btn');
    },false);
    btn.addEventListener('click', function(){    //  后执行，目标元素代码按顺序执行
        console.log('capture','btn');
    },true);

    div.addEventListener('click', function(){    // 其他元素按阶段执行
        console.log('bubble','div');
    },false);
    div.addEventListener('click', function(){
        console.log('capture','div');
    },true);
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 
结果：
capture div
bubble btn
capture btn
bubble div
--></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="事件对象event"><a href="#事件对象event" class="headerlink" title="事件对象event"></a>事件对象event</h5><p>1.event的兼容问题</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// w3c标准:event</span>
<span class="token comment" spellcheck="true">// ie中：window.event</span>
<span class="token keyword">var</span> event <span class="token operator">=</span> event <span class="token operator">?</span> event <span class="token punctuation">:</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>2.阻止默认事件</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// w3c标准：event.preventDefault();</span>
<span class="token comment" spellcheck="true">// ie中：event.returnValue = false;</span>
evnet<span class="token punctuation">.</span>preventDefault <span class="token operator">?</span> event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> event<span class="token punctuation">.</span>returnValue<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>阻止默认事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stopDefault(event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    选我
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    function stopDefault(event) {
        event = event ? event : window.event;
        event.preventDefault();    // checkbox的可选择默认事件被禁用了
    }
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3.事件目标target</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// w3c标准：var target = event.target;</span>
<span class="token comment" spellcheck="true">// ie中：var target = event.srcElement;</span>
<span class="token keyword">var</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token operator">||</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>4.阻止冒泡</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// w3c标准</span>
event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 微软ie，新版的chrome/opera也支持了该方法</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 如果不在cancelB()方法中添加阻止事件冒泡，将会触发body的onclick事件 --></span>
<span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>冒泡测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>body上的click事件<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stopPro(event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    function stopPro(event) {
        event = event ? event : window.event;
        event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
          alert('btn 上的click事件');
    }
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>5.事件委托</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 必须是父子关系</span>
<span class="token comment" spellcheck="true">// 动态添加元素最好使用委托或jquery的on事件方法</span>
<span class="token comment" spellcheck="true">// 有些动态添加的元素（瀑布流）是无法直接触发事件的，我们可以通过事件委托来实现动态添加元素的事件绑定</span>
<span class="token comment" spellcheck="true">// parentElement.delegate(son, type, fun);</span>
<span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 默认冒泡阶段执行</span>
ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// some code</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> event </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java object]]></title>
      <url>/2016/08/02/java-object/</url>
      <content type="html"><![CDATA[<h5 id="Java中的面向对象概述"><a href="#Java中的面向对象概述" class="headerlink" title="Java中的面向对象概述"></a>Java中的面向对象概述</h5><blockquote>
<p>1.面向对象是相对于面向过程而言的;<br>2.面向对象和面向过程都是一种思想，不是编程语言;<br>3.面向过程强调的是功能的行为;<br>4.面向对象是将功能封装进对象，强调的是具备了功能的对象;<br>5.面向对象是居于面向过程的;</p>
</blockquote>
<h5 id="对象中的成员分类"><a href="#对象中的成员分类" class="headerlink" title="对象中的成员分类"></a>对象中的成员分类</h5><blockquote>
<p>成员包含属性和行为<br>1.静态部分： 属性 —&gt; 成员变量<br>2.动态部分： 行为 —&gt; 成员方法</p>
</blockquote>
<h5 id="面向对象的特征-重点"><a href="#面向对象的特征-重点" class="headerlink" title="面向对象的特征(重点)"></a>面向对象的特征(重点)</h5><ol>
<li><b>封装：</b> 封装是将对象的属性和行为封装起来，对外隐藏实现细节，其载体就是类；<blockquote>
<p>封装的优点<br>1.将变化隔离<br>2.便于使用<br>3.提高重用性<br>4.提高安全性</p>
</blockquote>
</li>
<li><b>继承：</b> 继承是指一个对象从另一个对象中获取属性和方法的过程<blockquote>
<p>继承的优点<br>1.不需要写重复的代码，新的实现可以通过继承而来<br>2.在原有的实现中扩展自己</p>
<p>继承的缺点<br>1.打破了封装，因为基类向子类暴露了实现细节</p>
</blockquote>
</li>
<li><b>多态：</b> 父类对象应用于子类对象的特征就叫多态（即子类对象的指针指向父类对象，执行时执行子类对象的行为）<blockquote>
<p>多态的优点：<br>1.同一操作作用于不同的对象，可以有不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。</p>
</blockquote>
</li>
</ol>
<h5 id="java中的类"><a href="#java中的类" class="headerlink" title="java中的类"></a>java中的类</h5><blockquote>
<p>1.文件名和类名要一致<br>2.每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。<br>  在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。<br>3.回想ECMAScript 5 及以前都没有类的概念（这个只是和java语言的区别之一）</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 文件名 Person.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    String name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 成员变量</span>
    String gender<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//方法可以重载</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是无参的构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 给成员变量赋值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的名字叫"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// java中的入口函数</span>
        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// Person@15db9742(p在内存中是一个地址)</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// David</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 18</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 男</span>
        p<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 我的名字叫David</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础类型/内置对象]]></title>
      <url>/2016/07/16/js-operators/</url>
      <content type="html"><![CDATA[<h5 id="js的内置对象"><a href="#js的内置对象" class="headerlink" title="js的内置对象"></a>js的内置对象</h5><pre><code>1、Arguments            //函数参数集合        //arguments[&#39;ɑːgjʊm(ə)nts]参数/
2、Array                //数组
3、Boolean            //布尔对象
4、Date                //日期时间对象
5、Error                //异常对象
6、Function            //函数构造器
7、Math                //数学对象
8、Number            //数组对象
9、Object            //基础对象
10、RegExp            //正则表达式对象
11、Global            // 全局对象        //windou对象已经把global对象的方法实现了
</code></pre><p><br></p>
<h5 id="js的数据类型"><a href="#js的数据类型" class="headerlink" title="js的数据类型"></a>js的数据类型</h5><blockquote>
<p>问：js中数据类型有哪些?</p>
<ol>
<li>string</li>
<li>number</li>
<li>undefined</li>
<li>boolean</li>
<li>null</li>
<li>object</li>
</ol>
</blockquote>
<p>1.string</p>
<p>2.number</p>
<p>3.undefined</p>
<pre><code>注意：undefined派生于null，因此在使用“==”进行比较时会返回true
出现undefined有两种原因
1.访问对象不存在的属性或方法
2.声明了变量但从未赋值
</code></pre><p>4.null</p>
<pre><code>1.出现null值多数为显式的指定一个变量为null
2.声明空对象时应将其值赋值为null
3.使用typeof 时返回object
</code></pre><p>5.boolean</p>
<pre><code>使用Boolean()方法强制转换时有效
true:    1.任何非空字符串
        2.任何非零数值
        3.任何非空对象
        4.[]

特殊记忆：如下情况只能对使用Boolean()方法强制转换时有效
false:    1.空字符串
        2.0
        3.NaN
        4.null
        5.undefined
</code></pre><p>6.object</p>
<p><br></p>
<h5 id="强制转换和隐式转换的结果有所不同"><a href="#强制转换和隐式转换的结果有所不同" class="headerlink" title="强制转换和隐式转换的结果有所不同"></a>强制转换和隐式转换的结果有所不同</h5><p>强制转换为boolean类型时，只有非空字符串、非零数值、非空对象、</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true        //强制转换为true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//false        //隐式转换为false</span>
<span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//false        //强制转换为true，!true=false, false==true ->false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><br></p>
<h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><p>当两种不同类型的数据进行值的比较时，会出现隐式转换（null、undefied、NaN不参与隐式转换）</p>
<p>隐式转换的转换规则时：</p>
<p>object : 对象—&gt;字符串—&gt;数值</p>
<p>string :  数值</p>
<p>boolean : 数值</p>
<div style="text-align: center;"><img src="/imglinks/05转换.png" alt="05转换"></div>

<p><br></p>
<h5 id="不同类型的值间的运算"><a href="#不同类型的值间的运算" class="headerlink" title="不同类型的值间的运算"></a>不同类型的值间的运算</h5><blockquote>
<p>1.任何类型和字符串运算，最终的结果都是字符串</p>
<p>2.数字类型的值和undefined运算，都是NaN</p>
<p>3.字符串的前面添加加号时，会将字符串转换为数字，如果字符串不是数字字符串，将输出NaN</p>
<p>4.基础类型间的运算，会先将基础类型转换为number，再转换为string(前提是需要有string类型参与运算时才会最终转换为string类型)</p>
<p>5.对象类型的转换，先调用valueOf()方法将自身数据转换为基础类型，如果得到的不是基础类型再调用toString()方法</p>
<p>6.Date对象 转换为基础类型时，则先调用toString()方法，再调用valueOf()方法；</p>
</blockquote>
<p>1.其他类型转化为数字时</p>
<table>
<thead>
<tr>
<th style="text-align:center">原始数据类型</th>
<th style="text-align:center">转为number类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">undefined</td>
<td style="text-align:center">NaN</td>
</tr>
<tr>
<td style="text-align:center">null</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">数字字符串</td>
<td style="text-align:center">相应的数字</td>
</tr>
<tr>
<td style="text-align:center">非数字字符串</td>
<td style="text-align:center">NaN</td>
</tr>
</tbody>
</table>
<p><br></p>
<p>2.其他类型转化为字符串时</p>
<table>
<thead>
<tr>
<th style="text-align:center">原始数据类型</th>
<th style="text-align:center">目标类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">undefined</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">数字</td>
<td style="text-align:center">数字字符串</td>
</tr>
</tbody>
</table>
<p><br></p>
<h5 id="转换案例"><a href="#转换案例" class="headerlink" title="转换案例"></a>转换案例</h5><p>1.基础类型间的运算</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">+</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 0+NaN=NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 0+0=0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 1+1=2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//'11' -> 数字与字符串相加结果是字符串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//'33';(1+2)的结果然后与'3'相加;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//'123';先运算2+'3',然后1+'23'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'s'</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//'snull'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'s'</span> <span class="token operator">+</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 'sundefined'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'s'</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//'strue'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span> <span class="token operator">+</span> undefined <span class="token operator">+</span> <span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+1+NaN+'s'=2+NaN+'s'=NaN+'s'=NaNs</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2.Date对象的转换,先调用toString再调用valueOf</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.为了便于观察重写Date的toString方法和valueOf方法</span>
Date<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Date<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>valueOf <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">,</span>
    b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用toString，1 + 1，结果是2</span>


<span class="token comment" spellcheck="true">// 再重写toString方法</span>
Date<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">,</span>
    d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用toString方法返回的不是基础类型，再调用valueOf，2 + 2，结果是4</span>

<span class="token comment" spellcheck="true">// 再重写valueOf方法</span>
<span class="token comment" spellcheck="true">//    Date.prototype.valueOf = function(){</span>
<span class="token comment" spellcheck="true">//        return {};</span>
<span class="token comment" spellcheck="true">//    }</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//    var e = new Date,</span>
<span class="token comment" spellcheck="true">//            f = new Date;</span>
<span class="token comment" spellcheck="true">//    console.log(e + f); // 报错</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[settimeout面试题解析]]></title>
      <url>/2016/07/15/js-settimeout/</url>
      <content type="html"><![CDATA[<h5 id="setTimeout与循环闭包的经典面试题"><a href="#setTimeout与循环闭包的经典面试题" class="headerlink" title="setTimeout与循环闭包的经典面试题"></a>setTimeout与循环闭包的经典面试题</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//利用闭包，修改下面的代码，让循环输出的结果依次为1， 2， 3， 4， 5</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在最初学习setTimeout的时候，我们很容易知道setTimeout有两个参数，第一个参数为一个函数，我们通过该函数定义将要执行的操作。第二个参数为一个时间毫秒数，表示延迟执行的时间。<br>那么我们运行如下代码试试看有什么意外的效果</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'一秒钟之后我将被打印出来'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>控制台中的结果：</p>
<div style="text-align: center;"><img src="/imglinks/02setTimeout.png" alt="02setTimeout"></div>

<p>细心的同学肯定会发现为什么会多输出一个数字13来？</p>
<p>这是因为每一个setTimeout在执行时，会返回一个唯一ID，上图中的数字13，就是这个唯一ID。我们在使用时，常常会使用一个变量将这个唯一ID保存起来，用以传入clearTimeout，清除定时器。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'如果不清除我，我将会一秒之后出现。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 清除之后，通过setTimeout定义的操作并不会执行</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来，我们还需要考虑另外一个重要的问题，那就是setTimeout中定义的操作，在什么时候执行？为了引起大家的重视，我们来看看下面的例子。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思考一下，当我将setTimeout的延迟时间设置为0时，上面的执行顺序会是什么？</span>
<span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout actions.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'other actions.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这里，将会介绍另外一个特殊的队列结构，页面中所有由setTimeout定义的操作，都将放在同一个队列中依次执行。<br>我用下图跟大家展示一下队列数据结构的特点。</p>
<div style="text-align: center;"><img src="/imglinks/03setTimeout.png" alt="02setTimeout"></div>

<p>而这个队列执行的时间，需要等待到函数调用栈清空之后才开始执行。即所有可执行代码执行完毕之后，才会开始执行由setTimeout定义的操作。而这些操作进入队列的顺序，则由设定的延迟时间来决定。</p>
<p>因此在上面这个例子中，即使我们将延迟时间设置为0，它定义的操作仍然需要等待所有代码执行完毕之后才开始执行。这里的延迟时间，并非相对于setTimeout执行这一刻，而是相对于其他代码执行完毕这一刻。所以上面的例子执行结果就非常容易理解了。</p>
<p>为了帮助大家理解，再来一个结合变量提升的更加复杂的例子。如果你能够正确看出执行顺序，那么你对于函数的执行就有了比较正确的认识了，如果还不能，就需要百度一下变量提升相关的问题了。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTImeout 10ms.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

fn<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout 20ms.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div style="text-align: center;"><img src="/imglinks/04setTimeout.png" alt="02setTimeout"></div>

<p>OK，关于setTimeout就暂时先介绍到这里，我们回过头来看看那个循环闭包的思考题。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果我们直接这样写，根据setTimeout定义的操作在函数调用栈清空之后才会执行的特点，for循环里定义了5个setTimeout操作。而当这些操作开始执行时，for循环的i值，已经先一步变成了6。因此输出结果总为6。而我们想要让输出结果依次执行，我们就必须借助闭包的特性，每次循环时，将i值保存在一个闭包中，当setTimeout中定义的操作执行时，则访问对应闭包保存的i值即可。</p>
<p>而我们知道在函数中闭包判定的准则，即执行时是否在内部定义的函数中访问了上层作用域的变量。因此我们需要包裹一层自执行函数为闭包的形成提供条件。</p>
<p>因此，我们只需要2个操作就可以完成题目需求，一是使用自执行函数提供闭包条件，二是传入i值并保存在闭包中。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 

    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然，也可以在setTimeout的第一个参数处利用闭包。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以使用ES6语法中的let来保存块作用域中的变量</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/05/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 异步 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
